		           +--------------------------+
				   |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

John Riforgiate
Bryden Pollard

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
courses.cs.vt.edu/~cs3204/fall2009/pintos-vt-local/Project2Session.ppt
https://static1.squarespace.com/static/5b18aa0955b02c1de94e4412/t/5b85fad2f950b7b16b7a2ed6/1535507195196/Pintos+Guide
https://github.com/Waqee/Pintos-Project-2
https://github.com/ryantimwilson/Pintos-Project-2


			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
N/A
One enumerator for debugging: syscall_names[]
it is used to print out the name of the SYS processes that have been called.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We used a loop to read in all the arguments and another loop to push them to
the stack because they need to be pushed in reverse order. During the second
loop we save the pointers to them in memory so we can push those to the stack
as well. We originally tried using recursion but the extra frames overflowed 
the stack page.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

If we used strtok() instead of strtok_r() we would lose access
to the other items in the string. Because we are able to save the 
pointer, the kernel can come back and look at where it needs to 
go to get the arguments when we need them.

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. By using the Unix approach it is possible to run more complicated
   commands using pipes or backticks that feed into each other.
2. The complexity of the kernel is reduced. While the shell may be more 
   complex because of it, this means that the most essential program in
   an OS, the kernel, is more readable and less likely to have bugs.
3. Because the running time of the kernel is expensive compared to user
   programs it would be beneficial to have less kernel code.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
in struct thread:

struct thread *parent; // used to keep track of the parent (if any)
	
struct semaphore process_wait_sema; // used for a crude implementation of process_wait to be able to run tests
	
struct list file_list; // used to store pointers to all the open files a thread contains
int fd; // used to identify the files a thread contains

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are associated with open files via a list. Each open file
has a file descriptor starting from 2 because 0 and 1 are reserved. In this
implementation file descriptors are unique within a single process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

User data can be written or read from the kernel by issuing the SYS_READ or SYS_WRITE
command in a kernel interrupt frame. Both use a semaphore when accessing the file to help with
synchronization. Once we have opened a file, we can access it via a pointer to the file destination
or the reference id that the thread that opened it has saved.
By checking if the file is in our file list we are able to make sure we don't open two copies of the 
same file or try to delete two copies of the same file. 


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

pagedir_get_page would be called from the syscall.c and process.c a total of 11 times regardlessly
because we use it to verify the validity of a pointer. It is possible to greatly reduce this if
we chose to do the pagefault exception method instead. It would only need 2 or 3 calls in this case.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

The current wait system call is not complete because we have no support for children.
There is just a semaphore making sure that the process waits until a subprocess under it has been completed.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

In system calls we just checked to make sure that the call was within the bounds of 
acceptable memory and that the page was actually allocated for the
specific thread that needed the memory. Our strategy was to prevent 
access violations from happening by verifying these things each time
a pointer would be dereferenced.

When an error is detected we do nothing because we did not implement error checking yet. 

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We were unable to implement this, but if we had more time we were planning
on having a child process store whether or not it had been loaded and using
the barrier call similar to what ryantimwilson did.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

P uses process_wait and has a semaphore that will not let it run until
the thread running under it finishes. Because inheritance only allows for
one child per process race conditions are avoided.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

It seemed like the simplest way to access things would be to check the
pointer and dereference it each time to avoid page faults and other errors.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

File descriptors are small, taking up only the space of an int and
are relatively easy to access. However, they are stored within a list
and lists in pintos add a lot of complexity to the equation which is 
a serious disadvantage because of the large complexity of pintos as it is.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
We did not change it.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
